'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _createDecoratedClass = (function () { function defineProperties(target, descriptors, initializers) { for (var i = 0; i < descriptors.length; i++) { var descriptor = descriptors[i]; var decorators = descriptor.decorators; var key = descriptor.key; delete descriptor.key; delete descriptor.decorators; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor || descriptor.initializer) descriptor.writable = true; if (decorators) { for (var f = 0; f < decorators.length; f++) { var decorator = decorators[f]; if (typeof decorator === 'function') { descriptor = decorator(target, key, descriptor) || descriptor; } else { throw new TypeError('The decorator for method ' + descriptor.key + ' is of the invalid type ' + typeof decorator); } } if (descriptor.initializer !== undefined) { initializers[key] = descriptor; continue; } } Object.defineProperty(target, key, descriptor); } } return function (Constructor, protoProps, staticProps, protoInitializers, staticInitializers) { if (protoProps) defineProperties(Constructor.prototype, protoProps, protoInitializers); if (staticProps) defineProperties(Constructor, staticProps, staticInitializers); return Constructor; }; })();

var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; desc = parent = getter = undefined; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _reactAddons = require('react/addons');

var _reactAddons2 = _interopRequireDefault(_reactAddons);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _autobindDecorator = require('autobind-decorator');

var _autobindDecorator2 = _interopRequireDefault(_autobindDecorator);

var _pureRenderDecorator = require('pure-render-decorator');

var _pureRenderDecorator2 = _interopRequireDefault(_pureRenderDecorator);

var _utils = require('utils');

var maxClickDuration = 200;
var BEMSeparator = '--';
var deleteButtonClass = 'Delete';
function stopPropagation(e) {
  e.stopPropagation();
}

/**
 * A MutableListItem is a single item in a mutable list. It accepts
 * arbitrary DOM content as its children For convenience, it also
 * renders a button that calls the onRemove handler when pressed.
 */

var MutableListItem = (function (_React$Component) {
  _inherits(MutableListItem, _React$Component);

  function MutableListItem(props) {
    _classCallCheck(this, _MutableListItem);

    _get(Object.getPrototypeOf(_MutableListItem.prototype), 'constructor', this).call(this, props);

    this.state = {
      isDragging: false
    };

    this.dragOffset = [0, 0];

    this._outerHeight = null;
    this._boundingClientRect = null;

    this._clickFlag = false;
  }

  _createDecoratedClass(MutableListItem, [{
    key: 'getBoundingClientRect',
    value: function getBoundingClientRect() {
      return this._boundingClientRect;
    }
  }, {
    key: 'getOuterHeight',
    value: function getOuterHeight() {
      return this._outerHeight;
    }

    // Calculate dimensions when an element is mounted
  }, {
    key: 'componentDidMount',
    value: function componentDidMount() {
      var _this = this;

      var el = _reactAddons2['default'].findDOMNode(this);
      this._outerHeight = (0, _utils.outerHeight)(el);
      this._boundingClientRect = el.getBoundingClientRect();

      el.addEventListener('transitionend', function (e) {
        _this.props.onTransitionEnd(_this.props.index, e);
      });
    }

    // Recalculate dimensions when an element is updated
  }, {
    key: 'componentDidUpdate',
    value: function componentDidUpdate() {
      var el = _reactAddons2['default'].findDOMNode(this);
      this._outerHeight = (0, _utils.outerHeight)(el);
      this._boundingClientRect = el.getBoundingClientRect();
    }
  }, {
    key: 'componentWillLeave',
    value: function componentWillLeave(cb) {
      var el = _reactAddons2['default'].findDOMNode(this);
      el.style.visibility = 'hidden';
      this.props.onDelete(this.props.index, this.getOuterHeight(), cb);
    }

    // Determine if we have a click or a drag
  }, {
    key: '_onMouseDown',
    value: function _onMouseDown(e) {
      // Only execute the drag logic if we have a left click
      if (e.button !== 0) {
        return;
      }

      var el = _reactAddons2['default'].findDOMNode(this);
      this._boundingClientRect = el.getBoundingClientRect();
      this._clickFlag = true;

      // We need to persist this event to use it when the timeout fires,
      // otherwise React will reuse the same object to store new events
      e.persist();
      e.preventDefault();
      window.setTimeout(this._onDragStart.bind(this, e), maxClickDuration);
    }
  }, {
    key: '_onMouseUp',
    value: function _onMouseUp(e) {
      if (!this._clickFlag) {
        return;
      }

      this._clickFlag = false;
      this.props.onClick(e);
    }
  }, {
    key: '_onDragStart',
    value: function _onDragStart(e) {
      if (!this._clickFlag) {
        return;
      }

      this._clickFlag = false;
      window.addEventListener('mousemove', this._onDrag);
      window.addEventListener('touchmove', this._onDrag);
      window.addEventListener('mouseup', this._onDragEnd);
      window.addEventListener('touchend', this._onDragEnd);
      this.dragOffset = (0, _utils.pointerOffset)(e, this.getBoundingClientRect());
      this.props.onDragStart(this, e);
      this.setState({
        isDragging: true
      });
    }
  }, {
    key: '_onDrag',
    decorators: [_autobindDecorator2['default']],
    value: function _onDrag(e) {
      if (e.targetTouches != null) {
        e.preventDefault();
      }

      this.props.onDrag(this, e);
    }
  }, {
    key: '_onDragEnd',
    decorators: [_autobindDecorator2['default']],
    value: function _onDragEnd(e) {
      if (e.targetTouches != null) {
        e.preventDefault();
      }

      window.removeEventListener('mousemove', this._onDrag);
      window.removeEventListener('touchmove', this._onDrag);
      window.removeEventListener('mouseup', this._onDragEnd);
      window.removeEventListener('touchend', this._onDragEnd);
      this.props.onDragEnd(this, e);
      this.setState({
        isDragging: false
      });
    }
  }, {
    key: 'render',
    value: function render() {
      var _this2 = this;

      var style = this.props.style;
      if (this.props.enableTransformTransitions) {
        var transition = 'transform ' + this.props.transitionDuration + 'ms';
        if (style.transition == null || style.transition === '') {
          style.transition = transition;
        } else {
          style.transition += ', ' + transition;
        }
      }

      var baseClass = this.props.className && this.props.className.split(' ')[0] || 'ReactList-item';
      var props = {
        onMouseDown: function onMouseDown(e) {
          return _this2._onMouseDown(e);
        },
        onTouchStart: function onTouchStart(e) {
          return _this2._onMouseDown(e);
        },
        onMouseUp: function onMouseUp(e) {
          return _this2._onMouseUp(e);
        },
        onTouchEnd: function onTouchEnd(e) {
          return _this2._onMouseUp(e);
        },
        style: style,
        key: this.props.key,
        className: (0, _classnames2['default'])(this.props.className, _defineProperty({}, '' + baseClass + BEMSeparator + 'dragging', this.state.isDragging))
      };

      return _reactAddons2['default'].createElement(
        'li',
        props,
        this.props.children,
        _reactAddons2['default'].createElement(
          'button',
          {
            className: '' + baseClass + deleteButtonClass,
            onMouseDown: stopPropagation,
            onTouchStart: stopPropagation,
            onClick: this.props.onRemove },
          'x'
        )
      );
    }
  }]);

  var _MutableListItem = MutableListItem;
  MutableListItem = (0, _pureRenderDecorator2['default'])(MutableListItem) || MutableListItem;
  return MutableListItem;
})(_reactAddons2['default'].Component);

MutableListItem.defaultProps = {
  onClick: function onClick() {},
  onRemove: function onRemove() {},
  enableTransformTransitions: false,
  transitionDuration: 300
};

MutableListItem.propTypes = {
  onClick: _reactAddons2['default'].PropTypes.func,
  /**
   * Function called whenever delete button is pressed. Actually
   * removing the list item from the props passed into MutableList
   * should be accomplished in this function
   */
  onRemove: _reactAddons2['default'].PropTypes.func,
  /**
   * Duration of the transform transition for an individual list item.
   * Overrides the same property if set on the parent list.
   */
  transitionDuration: _reactAddons2['default'].PropTypes.number,
  enableTransformTransitions: _reactAddons2['default'].PropTypes.bool
};

exports['default'] = MutableListItem;
module.exports = exports['default'];